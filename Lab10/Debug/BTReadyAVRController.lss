
BTReadyAVRController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b85  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000906  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050c  00000000  00000000  0000189f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c3  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e0  00000000  00000000  000022e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000025c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	30 c1       	rjmp	.+608    	; 0x2fc <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#define RIGHT_BUTTON	 1

int main(void)
{
	// initialize joystick switches (PB4:PB0) as inputs
	DDRB |= (1<<DDRB7 | 1<<DDRB6 | 1<<DDRB5);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	80 6e       	ori	r24, 0xE0	; 224
  a2:	87 bb       	out	0x17, r24	; 23

	// turn on pull-ups for active low joystick switches
	PORTB |= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB5);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8f 61       	ori	r24, 0x1F	; 31
  a8:	88 bb       	out	0x18, r24	; 24

	// initialize LEDs 0-3 (PC3:PC0) as outputs
	DDRC |= (1<<DDRC3 | 1<<DDRC2 | 1<<DDRC1 | 1<<DDRC0);
  aa:	84 b3       	in	r24, 0x14	; 20
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	84 bb       	out	0x14, r24	; 20

	// turn off the active low LEDs
	LEDS |= (1<<DDRC3 | 1<<DDRC2 | 1<<DDRC1 | 1<<DDRC0);
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	8f 60       	ori	r24, 0x0F	; 15
  b4:	85 bb       	out	0x15, r24	; 21

    // initialize USART0 (NB: PE0=Rx, PE1=Tx)
    usart0_init(BaudRate, DataBits, StopBits, NoParity);
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	48 e0       	ldi	r20, 0x08	; 8
  bc:	60 e8       	ldi	r22, 0x80	; 128
  be:	75 e2       	ldi	r23, 0x25	; 37
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	93 d0       	rcall	.+294    	; 0x1ec <usart0_init>

	// initialize the joystickState state variable
	unsigned char joyMask = (unsigned char) ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB5);
	unsigned char joyState;
	// NB: in AtmelStudio chars are unsigned by default (!@#$!)
	signed char currentSpeed = 0;  // initially not moving
  c6:	c0 e0       	ldi	r28, 0x00	; 0


		// set transmit delay for "optimal" responsiveness (about 1/20 sec)
		if(currentSpeed < 0) {
			// moving in reverse, so blink speed LEDS
			LEDS = 0x0F;		// all LEDs off
  c8:	df e0       	ldi	r29, 0x0F	; 15
	signed char currentTurn  = 0;  // initially not turning
	unsigned char ledPattern;

	while(1) {
		// read the joystick switches (NB: joymask = 0b00011111)
		joyState = (PINB & joyMask) ^ joyMask;
  ca:	86 b3       	in	r24, 0x16	; 22
		
		// determine if a button was pressed
		switch(joyState) {
  cc:	80 95       	com	r24
  ce:	8f 71       	andi	r24, 0x1F	; 31
  d0:	84 30       	cpi	r24, 0x04	; 4
  d2:	09 f4       	brne	.+2      	; 0xd6 <main+0x38>
  d4:	4a c0       	rjmp	.+148    	; 0x16a <main+0xcc>
  d6:	30 f4       	brcc	.+12     	; 0xe4 <main+0x46>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	09 f4       	brne	.+2      	; 0xde <main+0x40>
  dc:	49 c0       	rjmp	.+146    	; 0x170 <main+0xd2>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	71 f1       	breq	.+92     	; 0x13e <main+0xa0>
  e2:	48 c0       	rjmp	.+144    	; 0x174 <main+0xd6>
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	a9 f0       	breq	.+42     	; 0x112 <main+0x74>
  e8:	80 31       	cpi	r24, 0x10	; 16
  ea:	09 f0       	breq	.+2      	; 0xee <main+0x50>
  ec:	43 c0       	rjmp	.+134    	; 0x174 <main+0xd6>
			case STOP_BUTTON:
				usart0_tx('S');
  ee:	83 e5       	ldi	r24, 0x53	; 83
  f0:	df d0       	rcall	.+446    	; 0x2b0 <usart0_tx>
				currentSpeed = 0;
				currentTurn = 0;

				// wait for button to be released
				while(((PINB & joyMask) ^ joyMask) == STOP_BUTTON) {
  f2:	86 b3       	in	r24, 0x16	; 22
  f4:	80 95       	com	r24
  f6:	8f 71       	andi	r24, 0x1F	; 31
  f8:	80 31       	cpi	r24, 0x10	; 16
  fa:	09 f0       	breq	.+2      	; 0xfe <main+0x60>
  fc:	3d c0       	rjmp	.+122    	; 0x178 <main+0xda>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	83 e3       	ldi	r24, 0x33	; 51
 100:	97 e0       	ldi	r25, 0x07	; 7
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <main+0x64>
 106:	86 b3       	in	r24, 0x16	; 22
 108:	80 95       	com	r24
 10a:	8f 71       	andi	r24, 0x1F	; 31
 10c:	80 31       	cpi	r24, 0x10	; 16
 10e:	b9 f3       	breq	.-18     	; 0xfe <main+0x60>
 110:	33 c0       	rjmp	.+102    	; 0x178 <main+0xda>
					_delay_ms(1);
				}

				break;
			case FORWARD_BUTTON:
				if(currentSpeed < MAX_SPEED) {
 112:	c9 31       	cpi	r28, 0x19	; 25
 114:	0c f4       	brge	.+2      	; 0x118 <main+0x7a>
					currentSpeed++;
 116:	cf 5f       	subi	r28, 0xFF	; 255
				}

				// send direction character ('F' or 'B')
				if(currentSpeed >= 0) {
 118:	cc 23       	and	r28, r28
					usart0_tx('F');
 11a:	1c f0       	brlt	.+6      	; 0x122 <main+0x84>
 11c:	86 e4       	ldi	r24, 0x46	; 70
 11e:	c8 d0       	rcall	.+400    	; 0x2b0 <usart0_tx>
				}
				else {
					usart0_tx('B');
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x88>
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	c5 d0       	rcall	.+394    	; 0x2b0 <usart0_tx>
				}

				// send speed value (0-25) as a character (a-z)
				usart0_tx(abs(currentSpeed) + 'a');
 126:	8c 2f       	mov	r24, r28
 128:	0c 2e       	mov	r0, r28
 12a:	00 0c       	add	r0, r0
 12c:	99 0b       	sbc	r25, r25
 12e:	99 23       	and	r25, r25
 130:	1c f4       	brge	.+6      	; 0x138 <main+0x9a>
 132:	91 95       	neg	r25
 134:	81 95       	neg	r24
 136:	91 09       	sbc	r25, r1
 138:	8f 59       	subi	r24, 0x9F	; 159
 13a:	ba d0       	rcall	.+372    	; 0x2b0 <usart0_tx>
				break;
 13c:	1b c0       	rjmp	.+54     	; 0x174 <main+0xd6>
			case BACKWARD_BUTTON:
				if(currentSpeed > MIN_SPEED) {
 13e:	c8 3e       	cpi	r28, 0xE8	; 232
					currentSpeed--;
 140:	0c f0       	brlt	.+2      	; 0x144 <main+0xa6>
				}

				// send direction character ('F' or 'B')
				if(currentSpeed >= 0) {
 142:	c1 50       	subi	r28, 0x01	; 1
					usart0_tx('F');
 144:	cc 23       	and	r28, r28
 146:	1c f0       	brlt	.+6      	; 0x14e <main+0xb0>
 148:	86 e4       	ldi	r24, 0x46	; 70
 14a:	b2 d0       	rcall	.+356    	; 0x2b0 <usart0_tx>
				}
				else {
					usart0_tx('B');
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0xb4>
 14e:	82 e4       	ldi	r24, 0x42	; 66
 150:	af d0       	rcall	.+350    	; 0x2b0 <usart0_tx>
				}

				// send speed value (0-25) as a character (a-z)
				usart0_tx(abs(currentSpeed) + 'a');
 152:	8c 2f       	mov	r24, r28
 154:	0c 2e       	mov	r0, r28
 156:	00 0c       	add	r0, r0
 158:	99 0b       	sbc	r25, r25
 15a:	99 23       	and	r25, r25
 15c:	1c f4       	brge	.+6      	; 0x164 <main+0xc6>
 15e:	91 95       	neg	r25
 160:	81 95       	neg	r24
 162:	91 09       	sbc	r25, r1
				break;
 164:	8f 59       	subi	r24, 0x9F	; 159
			case LEFT_BUTTON:
 				usart0_tx('L');
 166:	a4 d0       	rcall	.+328    	; 0x2b0 <usart0_tx>
 168:	05 c0       	rjmp	.+10     	; 0x174 <main+0xd6>
 16a:	8c e4       	ldi	r24, 0x4C	; 76
				break;
 16c:	a1 d0       	rcall	.+322    	; 0x2b0 <usart0_tx>
			case RIGHT_BUTTON:
 				usart0_tx('R');
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0xd6>
 170:	82 e5       	ldi	r24, 0x52	; 82
 172:	9e d0       	rcall	.+316    	; 0x2b0 <usart0_tx>
		// show the LED "speed bar" according to currentSpeed (1-4)
		// NB: the LEDs form a stacked "speed bar" with 1, 2, 3, or 4
		// LEDs lit (corresponding to speeds of 1 to 4). Note that
		// the bottom LED is LED3, so must light them in reverse
		// order (LED3:LED1)
		if(abs(currentSpeed)==0)
 174:	c1 11       	cpse	r28, r1
 176:	04 c0       	rjmp	.+8      	; 0x180 <main+0xe2>
			ledPattern = (LEDS & 0xF0) + 0b1111;
 178:	85 b3       	in	r24, 0x15	; 21
 17a:	8f 60       	ori	r24, 0x0F	; 15
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	2b c0       	rjmp	.+86     	; 0x1d6 <main+0x138>
		else if(abs(currentSpeed)<=6)
 180:	9c 2f       	mov	r25, r28
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	8c 0f       	add	r24, r28
 186:	8d 30       	cpi	r24, 0x0D	; 13
 188:	20 f4       	brcc	.+8      	; 0x192 <main+0xf4>
			ledPattern = (LEDS & 0xF0) + 0b0111;
 18a:	85 b3       	in	r24, 0x15	; 21
 18c:	80 7f       	andi	r24, 0xF0	; 240
 18e:	89 5f       	subi	r24, 0xF9	; 249
 190:	11 c0       	rjmp	.+34     	; 0x1b4 <main+0x116>
		else if(abs(currentSpeed)<=12)
 192:	8c e0       	ldi	r24, 0x0C	; 12
 194:	8c 0f       	add	r24, r28
 196:	89 31       	cpi	r24, 0x19	; 25
 198:	20 f4       	brcc	.+8      	; 0x1a2 <main+0x104>
			ledPattern = (LEDS & 0xF0) + 0b0011;
 19a:	85 b3       	in	r24, 0x15	; 21
 19c:	80 7f       	andi	r24, 0xF0	; 240
 19e:	8d 5f       	subi	r24, 0xFD	; 253
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <main+0x116>
		else if(abs(currentSpeed)<=18)
 1a2:	9e 5e       	subi	r25, 0xEE	; 238
 1a4:	95 32       	cpi	r25, 0x25	; 37
 1a6:	20 f4       	brcc	.+8      	; 0x1b0 <main+0x112>
			ledPattern = (LEDS & 0xF0) + 0b0001;
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	80 7f       	andi	r24, 0xF0	; 240
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x116>
		else
			ledPattern = (LEDS & 0xF0) + 0b0000;
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	80 7f       	andi	r24, 0xF0	; 240


		// set transmit delay for "optimal" responsiveness (about 1/20 sec)
		if(currentSpeed < 0) {
 1b4:	cc 23       	and	r28, r28
 1b6:	7c f4       	brge	.+30     	; 0x1d6 <main+0x138>
			// moving in reverse, so blink speed LEDS
			LEDS = 0x0F;		// all LEDs off
 1b8:	d5 bb       	out	0x15, r29	; 21
 1ba:	ef ef       	ldi	r30, 0xFF	; 255
 1bc:	ff e8       	ldi	r31, 0x8F	; 143
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0x120>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x126>
 1c4:	00 00       	nop
			_delay_ms(20);
			LEDS = ledPattern;	// turn on proper speed bits
 1c6:	85 bb       	out	0x15, r24	; 21
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	97 ed       	ldi	r25, 0xD7	; 215
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x12e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x134>
 1d2:	00 00       	nop
 1d4:	7a cf       	rjmp	.-268    	; 0xca <main+0x2c>
			_delay_ms(30);
		}
		else {
			// moving forward or stopped, so just display and delay
			LEDS = ledPattern;
 1d6:	85 bb       	out	0x15, r24	; 21
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	ef e1       	ldi	r30, 0x1F	; 31
 1dc:	f1 e0       	ldi	r31, 0x01	; 1
 1de:	91 50       	subi	r25, 0x01	; 1
 1e0:	e0 40       	sbci	r30, 0x00	; 0
 1e2:	f0 40       	sbci	r31, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <main+0x140>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <main+0x14a>
 1e8:	00 00       	nop
 1ea:	6f cf       	rjmp	.-290    	; 0xca <main+0x2c>

000001ec <usart0_init>:
// For example,
//     usart0_init(9600,8,1,0);
// sets the baudrate to 9600, with 8 data bits, 1 stop bit, and no parity
//
void usart0_init(long unsigned int baudrate, unsigned char databits, unsigned char stopbits, unsigned char parity)
{
 1ec:	0f 93       	push	r16
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	c4 2f       	mov	r28, r20
 1f4:	d2 2f       	mov	r29, r18
    long unsigned int baud_prescale;

	// set baud rate (via UBRR0 high and low registers)
    baud_prescale = (((F_OSC/(baudrate * 16UL)))-1);
 1f6:	dc 01       	movw	r26, r24
 1f8:	cb 01       	movw	r24, r22
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	aa 1f       	adc	r26, r26
 208:	bb 1f       	adc	r27, r27
 20a:	9c 01       	movw	r18, r24
 20c:	ad 01       	movw	r20, r26
 20e:	22 0f       	add	r18, r18
 210:	33 1f       	adc	r19, r19
 212:	44 1f       	adc	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	44 1f       	adc	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e8       	ldi	r23, 0x80	; 128
 222:	80 e7       	ldi	r24, 0x70	; 112
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	48 d0       	rcall	.+144    	; 0x2b8 <__udivmodsi4>
 228:	ba 01       	movw	r22, r20
 22a:	a9 01       	movw	r20, r18
 22c:	41 50       	subi	r20, 0x01	; 1
 22e:	51 09       	sbc	r21, r1
 230:	61 09       	sbc	r22, r1
 232:	71 09       	sbc	r23, r1
	UBRR0H = baud_prescale >> 8;
 234:	bb 27       	eor	r27, r27
 236:	a7 2f       	mov	r26, r23
 238:	96 2f       	mov	r25, r22
 23a:	85 2f       	mov	r24, r21
 23c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = baud_prescale;
 240:	49 b9       	out	0x09, r20	; 9

    // set various bits of USCR0C for USART0 comm parameters    
    UCSR0C = 0;     // initially clear all UCSR0C bits
 242:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>

    // set databits
    switch(databits) {
 246:	c6 30       	cpi	r28, 0x06	; 6
 248:	29 f0       	breq	.+10     	; 0x254 <usart0_init+0x68>
 24a:	c7 30       	cpi	r28, 0x07	; 7
 24c:	49 f0       	breq	.+18     	; 0x260 <usart0_init+0x74>
 24e:	c5 30       	cpi	r28, 0x05	; 5
 250:	69 f4       	brne	.+26     	; 0x26c <usart0_init+0x80>
 252:	11 c0       	rjmp	.+34     	; 0x276 <usart0_init+0x8a>
        case 5:
            break;  // no changes if 5-bit data
        case 6:
            UCSR0C |= (1 << UCSZ00);
 254:	e5 e9       	ldi	r30, 0x95	; 149
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	82 60       	ori	r24, 0x02	; 2
 25c:	80 83       	st	Z, r24
            break;
 25e:	0b c0       	rjmp	.+22     	; 0x276 <usart0_init+0x8a>
        case 7:
            UCSR0C |= (1 << UCSZ01);
 260:	e5 e9       	ldi	r30, 0x95	; 149
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	84 60       	ori	r24, 0x04	; 4
 268:	80 83       	st	Z, r24
            break;
 26a:	05 c0       	rjmp	.+10     	; 0x276 <usart0_init+0x8a>
        default:  // default to 8 bits
            UCSR0C |= (1 << UCSZ01)|(1 << UCSZ00);
 26c:	e5 e9       	ldi	r30, 0x95	; 149
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	86 60       	ori	r24, 0x06	; 6
 274:	80 83       	st	Z, r24
            break;
    }
    
    // set parity
    switch(parity) {
 276:	01 30       	cpi	r16, 0x01	; 1
 278:	19 f0       	breq	.+6      	; 0x280 <usart0_init+0x94>
 27a:	02 30       	cpi	r16, 0x02	; 2
 27c:	39 f0       	breq	.+14     	; 0x28c <usart0_init+0xa0>
 27e:	0b c0       	rjmp	.+22     	; 0x296 <usart0_init+0xaa>
        case 1:     // odd parity
    	    UCSR0C |= (1 << UPM01)|(1 << UPM00);
 280:	e5 e9       	ldi	r30, 0x95	; 149
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 63       	ori	r24, 0x30	; 48
 288:	80 83       	st	Z, r24
            break;
 28a:	05 c0       	rjmp	.+10     	; 0x296 <usart0_init+0xaa>
        case 2:     // even parity
    	    UCSR0C |= (1 << UPM01);
 28c:	e5 e9       	ldi	r30, 0x95	; 149
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 62       	ori	r24, 0x20	; 32
 294:	80 83       	st	Z, r24
        default:
            break;  // default is no parity
    }
    
    // set stopbits
    if(stopbits == 2)
 296:	d2 30       	cpi	r29, 0x02	; 2
 298:	29 f4       	brne	.+10     	; 0x2a4 <usart0_init+0xb8>
        UCSR0C |= (1 << USBS0);
 29a:	e5 e9       	ldi	r30, 0x95	; 149
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	88 60       	ori	r24, 0x08	; 8
 2a2:	80 83       	st	Z, r24
    	
	// finally, enable receiver and transmitter
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 2a4:	88 e1       	ldi	r24, 0x18	; 24
 2a6:	8a b9       	out	0x0a, r24	; 10
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <usart0_tx>:
// as the function's only argument) in the buffer and returns. No error
// checking is performed and the function does not return a value.
void usart0_tx(unsigned char data)
{
    // wait for empty tx buffer
    while(!(UCSR0A & (1 << UDRE0)));
 2b0:	5d 9b       	sbis	0x0b, 5	; 11
 2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <usart0_tx>
    
    // put data into USART0's I/O data register (UDR0)
    UDR0 = data;
 2b4:	8c b9       	out	0x0c, r24	; 12
 2b6:	08 95       	ret

000002b8 <__udivmodsi4>:
 2b8:	a1 e2       	ldi	r26, 0x21	; 33
 2ba:	1a 2e       	mov	r1, r26
 2bc:	aa 1b       	sub	r26, r26
 2be:	bb 1b       	sub	r27, r27
 2c0:	fd 01       	movw	r30, r26
 2c2:	0d c0       	rjmp	.+26     	; 0x2de <__udivmodsi4_ep>

000002c4 <__udivmodsi4_loop>:
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	ee 1f       	adc	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	a2 17       	cp	r26, r18
 2ce:	b3 07       	cpc	r27, r19
 2d0:	e4 07       	cpc	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__udivmodsi4_ep>
 2d6:	a2 1b       	sub	r26, r18
 2d8:	b3 0b       	sbc	r27, r19
 2da:	e4 0b       	sbc	r30, r20
 2dc:	f5 0b       	sbc	r31, r21

000002de <__udivmodsi4_ep>:
 2de:	66 1f       	adc	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	1a 94       	dec	r1
 2e8:	69 f7       	brne	.-38     	; 0x2c4 <__udivmodsi4_loop>
 2ea:	60 95       	com	r22
 2ec:	70 95       	com	r23
 2ee:	80 95       	com	r24
 2f0:	90 95       	com	r25
 2f2:	9b 01       	movw	r18, r22
 2f4:	ac 01       	movw	r20, r24
 2f6:	bd 01       	movw	r22, r26
 2f8:	cf 01       	movw	r24, r30
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
